package graphics;

import animals.Animal;
import plants.Lettuce;
import plants.Plant;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

/**
 * Descripiton
 *
 * @author Yotam
 * @version $VERSION 30/04/2017
 * @see
 */
public class ZooPanel extends JPanel implements Runnable {

    private static final int MEAT = 0, CABBAGE = 1, LETTUCE = 2;
    private JPanel buttonPanel;
    public static final String PICTURESPATH = new File("").getAbsolutePath() + "\\src\\graphics\\pictures\\";
    public static Image image, bgImage;
    private Color bgColor;
    private JButton addAnimalZP;
    private JButton sleepZP;
    private JButton wakeUpZP;
    private JButton clearZP;
    private JButton foodZP;
    private JButton infoZP;
    private JButton exitZP;
    private AddAnimalDialog addAnimalDia;
    private Thread controller; // data member of class ZooPanel
    private ArrayList<Animal> animals;
    private Plant plant;


    public ZooPanel(JFrame frame) {
        addAnimalDia = new AddAnimalDialog(frame, this, "Add an Animal Dialog", false);
        addAnimalZP = new JButton("Add Animal");
        sleepZP = new JButton("Sleep");
        wakeUpZP = new JButton("Wake up");
        clearZP = new JButton("Clear All");
        foodZP = new JButton("Food ");
        infoZP = new JButton("Info");
        exitZP = new JButton("Exit");
        buttonPanel = new JPanel();
        bgColor = getBackground();
        setLayout(new BorderLayout());
        try {
            image = ImageIO.read(new File(PICTURESPATH + "savanna.jpg"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        init();
    }

    public void init() {

        addAnimalZP.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addAnimalDia.setVisible(true);
            }
        });


//        infoZP.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                JTable animalJTabel = new JTable();
//                String[] columnNames = {"Animal", "Color", "Weight", "Hor. Speed", "Ver. Speed", "Eat Counter"};
//                String[][] data;
//            }
//        });
//
        foodZP.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Object[] choices = {"Meat", "Cabbage", "Lettuce"};
                int choice = JOptionPane.showOptionDialog(null, "Please Choose Food", "Food for Animals",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,
                        null, choices, choices[0]);
                switch (choice) {
                    case MEAT:
                        System.out.println("Meat");
                        break;
                    case LETTUCE:
                        plant = new Lettuce();
                        repaint();
                        break;
                    case CABBAGE:
                        System.out.println("Cabbage");
                        break;
                }
            }
        });
        buttonPanel.add(addAnimalZP);
        buttonPanel.add(sleepZP);
        buttonPanel.add(wakeUpZP);
        buttonPanel.add(clearZP);
        buttonPanel.add(foodZP);
        buttonPanel.add(infoZP);
        buttonPanel.add(exitZP);
        add(buttonPanel, BorderLayout.SOUTH);
        repaint();
    }//end init()


    @Override
    protected void paintComponent(Graphics g) {
        Dimension d = getSize();
        super.paintComponent(g);
        if (bgImage != null) {
            g.drawImage(image, 0, 0, d.width, d.height, null);
        } else if (bgColor != null) {
            setBackground(bgColor);
        }
        if (plant != null) {
            plant.loadImages("");
            g.drawImage(plant.getImg(), getWidth() / 2, getHeight() / 2, plant.getImg().getWidth() / 4, plant.getImg().getHeight() / 4, null);
        }
    }

    /**
     * When an object implementing interface <code>Runnable</code> is used
     * to create a thread, starting the thread causes the object's
     * <code>run</code> method to be called in that separately executing
     * thread.
     * <p>
     * The general contract of the method <code>run</code> is that it may
     * take any action whatsoever.
     *
     * @see Thread#run()
     */
    @Override

    public void run() {

    }

    public void setBackgroundColor(Color bgColor) {
        bgImage = null;
        this.bgColor = bgColor;
        repaint();
    }

    public void setBackgroundImage() {
        bgColor = null;
        bgImage = image;
        repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }
}
